import base64

def decode_base64_all_encodings(base64_string):
    # List of encodings to try
    encodings = ["utf-8", "utf-16", "utf-16le", "utf-16be", "utf-32", "utf-32le", "utf-32be",
                 "ascii", "latin1", "iso-8859-1", "iso-8859-15"]

    # Decoding the base64 string
    base64_bytes = base64.b64decode(base64_string)

    # Trying to decode with different encodings
    results = {}
    for encoding in encodings:
        try:
            decoded_text = base64_bytes.decode(encoding)
            results[encoding] = decoded_text
        except UnicodeDecodeError:
            results[encoding] = "Decoding error"

    return results

# Example usage
base64_string = ""  # Replace this with your base64 string
base64_string = "SgWrFHzZGrt+dz9K0FIu3Q=="
decoded_results = decode_base64_all_encodings(base64_string)
for encoding, result in decoded_results.items():
    print(f"{encoding}: {result}")

